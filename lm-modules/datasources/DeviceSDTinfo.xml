<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1605299166</version>
        <name>DeviceSDTinfo</name>
        <displayedas>DeviceSDTinfo</displayedas>
        <description></description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>60</schedule>
        <appliesTo>isDevice()</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>LM SDT</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#########################      API Function Script      #########################
#------------------------------------------------------------------------------------------------------------
# Prerequisites:
#
#Requires -Version 4
#------------------------------------------------------------------------------------------------------------
# Initialize Variables
&#60;# account info #&#62;
$accessId = &#39;##api.user##&#39;
$accessKey = &#39;##api.pass##&#39;
$company = &#39;rfa&#39;
#------------------------------------------------------------------------------------------------------------

$deviceID = &#34;##system.deviceid##&#34;

# Functionize the reusable code that builds and executes the query
function Send-Request() {
    Param(
        [Parameter(position = 0, Mandatory = $true)]
        [string]$path,
        [Parameter(position = 1, Mandatory = $false)]
        [string]$httpVerb = &#39;GET&#39;,
        [Parameter(position = 2, Mandatory = $false)]
        [string]$queryParams,
        [Parameter(position = 3, Mandatory = $false)]
        [PSObject]$data,
        [Parameter(position = 4, Mandatory = $false)]
        [string]$version
    )

    # Use TLS 1.2
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

    &#60;# Construct URL #&#62;
    $url = &#34;https://$company.logicmonitor.com/santaba/rest$path$queryParams&#34;

    &#60;# Get current time in milliseconds #&#62;
    $epoch = [Math]::Round((New-TimeSpan -Start (Get-Date -Date &#34;1/1/1970&#34;) -End (Get-Date).ToUniversalTime()).TotalMilliseconds)

    &#60;# Concatenate Request Details #&#62;
    $requestVars = $httpVerb + $epoch + $data + $path

    &#60;# Construct Signature #&#62;
    $hmac = New-Object System.Security.Cryptography.HMACSHA256
    $hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)
    $signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))
    $signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace &#39;-&#39;
    $signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))

    &#60;# Construct Headers #&#62;
    $auth = &#39;LMv1 &#39; + $accessId + &#39;:&#39; + $signature + &#39;:&#39; + $epoch
    $headers = New-Object &#34;System.Collections.Generic.Dictionary[[String],[String]]&#34;
    $headers.Add(&#34;Authorization&#34;, $auth)
    $headers.Add(&#34;Content-Type&#34;, &#39;application/json&#39;)
    $headers.Add(&#34;X-version&#34;, $version)

    &#60;# Make request &#38; retry if failed due to rate limiting #&#62;
    $Stoploop = $false
    do {
        try {
            &#60;# Make Request #&#62;
            $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers
            $Stoploop = $true
        } catch {
            switch ($_) {
                { $_.Exception.Response.StatusCode.value__ -eq 429 } {
                    Write-Host &#34;Request exceeded rate limit, retrying in 60 seconds...&#34;
                    Start-Sleep -Seconds 60
                    $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers
                }
                { $_.Exception.Response.StatusCode.value__ } {
                    Write-Host &#34;Request failed, not as a result of rate limiting&#34;
                    # Dig into the exception to get the Response details.
                    # Note that value__ is not a typo.
                    Write-Host &#34;StatusCode: $($_.Exception.Response.StatusCode.value__)&#34;
                    Write-Host &#34;StatusDescription: $($_.Exception.Response.StatusCode)&#34;
                    $_.ErrorDetails.Message -match &#39;{&#34;errorMessage&#34;:&#34;([\d\S\s]+)&#34;,&#34;errorCode&#34;:(\d+),&#39;
                    Write-Host &#34;LM ErrorMessage $($matches[1])&#34;
                    Write-Host &#34;LM ErrorCode $($matches[2])&#34;
                    $response = $null
                    $Stoploop = $true
                }
                default {
                    Write-Host &#34;An Unknown Exception occurred:&#34;
                    Write-Host ($_ | Format-List -Force)
                    $response = $null
                    $Stoploop = $true
                }
            }
        }
    } While ($Stoploop -eq $false)
    Return $response
}


function Get-Device {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/devices/$id&#34;
    $queryParams = $null
    $data = $null
    $version = &#39;3&#39;
    $device = Send-Request $resourcePath $httpVerb $queryParams $data $version
    Return $device
}


function Get-SDTHistory {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/devices/$id/historysdts&#34;
    $queryParams = $null
    $data = $null
    $version = &#39;3&#39;
    $sdtHistory = Send-Request $resourcePath $httpVerb $queryParams $data $version
    Return $sdtHistory.items
}


function Get-DeviceAlertsBefore {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id,
        [Parameter(position = 1, Mandatory = $true)]
        [string]$start
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/devices/$id/alerts&#34;
    $queryParams = &#34;?start&#60;$start&#38;size=1000&#34;
    $data = $null
    $version = &#39;3&#39;
    $alerts = Send-Request $resourcePath $httpVerb $queryParams $data $version
    Return $alerts
}


function Get-DeviceAlertsAfter {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id,
        [Parameter(position = 1, Mandatory = $true)]
        [string]$start
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/devices/$id/alerts&#34;
    $queryParams = &#34;?start&#62;$start&#38;size=1000&#34;
    $data = $null
    $version = &#39;3&#39;
    $alerts = Send-Request $resourcePath $httpVerb $queryParams $data $version
    Return $alerts
}


$deviceHistoricalSDT = Get-SDTHistory $deviceID | Sort-Object -Property approximateEndEpoch -Descending | Select-Object -First 1
$currentEpoch = [Math]::Round((New-TimeSpan -Start (Get-Date -Date &#34;1/1/1970&#34;) -End (Get-Date).ToUniversalTime()).TotalMilliseconds)
$sdtStartEpoch = $deviceHistoricalSDT.approximateStartEpoch
$sdtEndEpoch = $deviceHistoricalSDT.approximateEndEpoch
$endTimeDiffMin = [math]::Round(($currentEpoch - $sdtEndEpoch) / 60000)
$startTimeDiffMin = [math]::Round(($currentEpoch - $sdtStartEpoch) / 60000)

$device = Get-Device $deviceID

switch ($device.alertStatus) {
    { $_ -eq &#34;none&#34; } {
        $deviceAlertStatus = 0
    } { $_ -match &#34;-warn-&#34; } {
        $deviceAlertStatus = 1
    } { $_ -match &#34;-error-&#34; } {
        $deviceAlertStatus = 2
    } { $_ -match &#34;-critical-&#34; } {
        $deviceAlertStatus = 3
    }
}

switch ($device.sdtStatus) {
    { $_ -match &#34;none-SDT-none&#34; } {
        $deviceSDTStatus = 1
    } default {
        $deviceSDTStatus = 0
    }
}

$alertsBeforeSDT = (Get-DeviceAlertsBefore $deviceID $sdtStartEpoch).total
$alertsAfterSDT = (Get-DeviceAlertsAfter $deviceID $sdtEndEpoch).total 

Write-Host &#34;MinutesSinceSDTStart=$startTimeDiffMin&#34;
Write-Host &#34;MinutesSinceSDTEnd=$endTimeDiffMin&#34;
Write-Host &#34;SDTActive=$deviceSDTStatus&#34;
Write-Host &#34;CurrentAlertSeverity=$deviceAlertStatus&#34;
Write-Host &#34;ActiveAlertsBeforeSDT=$alertsBeforeSDT&#34;
Write-Host &#34;ActiveAlertsAfterSDT=$alertsAfterSDT&#34;</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>ActiveAlertsAfterLastSDT</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>ActiveAlertsAfterSDT</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ActiveAlertsBeforeLastSDT</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>ActiveAlertsBeforeSDT</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>CurrentAlertSeverity</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>CurrentAlertSeverity</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MinutesSinceLastSDTEnd</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>MinutesSinceSDTEnd</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MinutesSinceLastSDTStart</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>MinutesSinceSDTStart</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>SDTActive</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>SDTActive</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
