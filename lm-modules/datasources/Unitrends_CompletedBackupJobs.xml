<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1605514375</version>
        <name>Unitrends_CompletedBackupJobs</name>
        <displayedas>Completed Backup Jobs</displayedas>
        <description></description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>300</schedule>
        <appliesTo>isUnitrends()</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>true</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>&#60;#
.NOTES
    Author:     Andy Escolastico
#&#62;
#----------------------------------------------------------[Declarations]----------------------------------------------------------#

$UniServer = &#34;##hostname##&#34;
$UniUser = &#34;##uni.user##&#34;
$UniPass = &#34;##uni.pass##&#34;

#-----------------------------------------------------------[Functions]------------------------------------------------------------#

(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-backups/main/unitrends-functions.ps1&#39;) | Invoke-Expression

(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-backups/main/general-functions.ps1&#39;) | Invoke-Expression

#-----------------------------------------------------------[Execution]------------------------------------------------------------#

# Ignores invalid certificate errors
Skip-InvalidCertErrors

try {
    # Connect to Unitrends server and retrieve auth token
    $AuthToken = (Get-UniSession -Server $UniServer -User $UniUser -Pass $UniPass).auth_token
    # Collect Job data
    $JobHistory = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/jobs/history/backup&#34;).data
    $JobConfigs = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/joborders&#34;).data
    $ApplianceiTime = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/date-time&#34;)
    # Add server ip and frequency datapoint to Job objects
    foreach ($i in $JobHistory) {
        $Frequency = $JobConfigs | Where-Object {$_.name -eq $i.name} | Select-Object calendar_str
        $Frequency = $Frequency.calendar_str | Where-Object {$_ -Notlike &#34;*/*/*&#34;}
        if (@($Frequency).Count -gt 1){
            $Frequency = $Frequency -Join &#34;; &#34;
        }
        $i | Add-Member -NotePropertyName &#34;frequency&#34; -NotePropertyValue $Frequency
        $i | Add-Member -NotePropertyName &#34;system_ip&#34; -NotePropertyValue $UniServer
    }
    # Collect Asset-Source data
    $Sources = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/assets&#34;).data
    # Build Asset Custom Objects
    $Assets = @()
    foreach ($x in $Sources) {
        foreach ($y in $x.children){
            $obj = [PSCustomObject]@{
                Asset = $y.name
                Source = $x.name
            }
            $Assets += $obj
        }
    }    
} catch {
    Write-Output &#34;Could not connect to $UniServer. Check Credentials or API access.&#34;
}

# Builds Objects for Unnasigned Assets
$arr = @()
foreach ($x in $JobHistory){
    foreach ($y in $x.backups){
        $obj = [PSCustomObject]@{
            Asset = $y.asset_name
            Source = $y.client_name
            Server = $x.system_ip
            Appliance = $x.system_name
            JobName = $x.name
            JobType = $x.type
            JobApp = $x.app_name
            JobFrequency = $x.frequency
            BackupStatus = $y.status
            BackupStart = [DateTime]$y.start_time
            BackupType = $y.mode
            BackupSize = $y.size
            BackupID = $y.backup_id
        }
        $arr += $obj
    }  
}
$AssignedUniAssets = $arr | Where-Object {($_.BackupStatus -ne &#34;Active&#34;) -and ($_.BackupStatus -ne &#34;Queued&#34;)} | Group-Object Asset | Foreach-Object {$_.Group | Sort-Object BackupStart | Select-Object -Last 1}
$ActiveUniAssets = $arr | Where-Object {($_.BackupStatus -eq &#34;Active&#34;) -or ($_.BackupStatus -eq &#34;Queued&#34;)}

# Builds Objects for Unnasigned Assets
$arr = @()
foreach ($i in $Assets) {    
    if ($i.Asset -notin $AssignedUniAssets.Asset) {
        $obj = [PSCustomObject]@{
            Asset = $i.Asset
            Source = $i.Source
        }
        $arr += $obj
    }
}
$UnassignedUniAssets = $arr

# Normalize Server Time
$ApplianceiTime = &#34;$($ApplianceiTime.month)/$($ApplianceiTime.day)/$($ApplianceiTime.year) $($ApplianceiTime.hour):$($ApplianceiTime.minute):$($ApplianceiTime.second)&#34;

#-----------------------------------------------------------[LogicMonitor Output]------------------------------------------------------------#

# Discovery Output
foreach ($i in $AssignedUniAssets){
    Write-Output &#34;$(($i.Asset) -replace(&#34; &#34;, &#34;_&#34;))##$($i.Asset)##$($i.Source)####auto.unitrends.BackupServer=$($i.Server)&#38;auto.unitrends.BackupAppliance=$($i.Appliance)&#38;auto.unitrends.JobName=$($i.JobName)&#38;auto.unitrends.JobType=$($i.JobType)&#38;auto.unitrends.JobApp=$($i.JobApp)&#38;auto.unitrends.JobFrequency=$($i.JobFrequency)&#38;auto.unitrends.BackupStart=$($i.BackupStart)&#38;auto.unitrends.BackupType=$($i.BackupType)&#38;auto.unitrends.BackupID=$($i.BackupID)&#34;
}</wildcardgroovyscript>
        <wildcardschedule>15</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Unitrends</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"powerShell","groovyscript":"<#\n.NOTES\n    Author:     Andy Escolastico\n#>\n#----------------------------------------------------------[Declarations]----------------------------------------------------------#\n\n$UniServer = \"##hostname##\"\n$UniUser = \"##uni.user##\"\n$UniPass = \"##uni.pass##\"\n\n#-----------------------------------------------------------[Functions]------------------------------------------------------------#\n\n(new-object Net.WebClient).DownloadString('https://raw.githubusercontent.com/RFAInc/rfa-backups/main/unitrends-functions.ps1') | Invoke-Expression\n\n(new-object Net.WebClient).DownloadString('https://raw.githubusercontent.com/RFAInc/rfa-backups/main/general-functions.ps1') | Invoke-Expression\n\n#-----------------------------------------------------------[Execution]------------------------------------------------------------#\n\n# Ignores invalid certificate errors\nSkip-InvalidCertErrors\n\ntry {\n    # Connect to Unitrends server and retrieve auth token\n    $AuthToken = (Get-UniSession -Server $UniServer -User $UniUser -Pass $UniPass).auth_token\n    # Collect Job data\n    $JobHistory = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method \"GET\" -Endpoint \"/jobs/history/backup\").data\n    $JobConfigs = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method \"GET\" -Endpoint \"/joborders\").data\n    $ApplianceiTime = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method \"GET\" -Endpoint \"/date-time\")\n    # Add server ip and frequency datapoint to Job objects\n    foreach ($i in $JobHistory) {\n        $Frequency = $JobConfigs | Where-Object {$_.name -eq $i.name} | Select-Object calendar_str\n        $Frequency = $Frequency.calendar_str | Where-Object {$_ -Notlike \"*/*/*\"}\n        if (@($Frequency).Count -gt 1){\n            $Frequency = $Frequency -Join \"; \"\n        }\n        $i | Add-Member -NotePropertyName \"frequency\" -NotePropertyValue $Frequency\n        $i | Add-Member -NotePropertyName \"system_ip\" -NotePropertyValue $UniServer\n    }\n    # Collect Asset-Source data\n    $Sources = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method \"GET\" -Endpoint \"/assets\").data\n    # Build Asset Custom Objects\n    $Assets = @()\n    foreach ($x in $Sources) {\n        foreach ($y in $x.children){\n            $obj = [PSCustomObject]@{\n                Asset = $y.name\n                Source = $x.name\n            }\n            $Assets += $obj\n        }\n    }    \n} catch {\n    Write-Output \"Could not connect to $UniServer. Check Credentials or API access.\"\n}\n\n# Builds Objects for Unnasigned Assets\n$arr = @()\nforeach ($x in $JobHistory){\n    foreach ($y in $x.backups){\n        $obj = [PSCustomObject]@{\n            Asset = $y.asset_name\n            Source = $y.client_name\n            Server = $x.system_ip\n            Appliance = $x.system_name\n            JobName = $x.name\n            JobType = $x.type\n            JobApp = $x.app_name\n            JobFrequency = $x.frequency\n            BackupStatus = $y.status\n            BackupStart = [DateTime]$y.start_time\n            BackupType = $y.mode\n            BackupSize = $y.size\n            BackupID = $y.backup_id\n        }\n        $arr += $obj\n    }  \n}\n$AssignedUniAssets = $arr | Where-Object {($_.BackupStatus -ne \"Active\") -and ($_.BackupStatus -ne \"Queued\")} | Group-Object Asset | Foreach-Object {$_.Group | Sort-Object BackupStart | Select-Object -Last 1}\n$ActiveUniAssets = $arr | Where-Object {($_.BackupStatus -eq \"Active\") -or ($_.BackupStatus -eq \"Queued\")}\n\n# Builds Objects for Unnasigned Assets\n$arr = @()\nforeach ($i in $Assets) {    \n    if ($i.Asset -notin $AssignedUniAssets.Asset) {\n        $obj = [PSCustomObject]@{\n            Asset = $i.Asset\n            Source = $i.Source\n        }\n        $arr += $obj\n    }\n}\n$UnassignedUniAssets = $arr\n\n# Normalize Server Time\n$ApplianceiTime = \"$($ApplianceiTime.month)/$($ApplianceiTime.day)/$($ApplianceiTime.year) $($ApplianceiTime.hour):$($ApplianceiTime.minute):$($ApplianceiTime.second)\"\n\n#-----------------------------------------------------------[LogicMonitor Output]------------------------------------------------------------#\n\n# Discovery Output\nforeach ($i in $AssignedUniAssets){\n    Write-Output \"$(($i.Asset) -replace(\" \", \"_\"))##$($i.Asset)##$($i.Source)####auto.unitrends.BackupServer=$($i.Server)&auto.unitrends.BackupAppliance=$($i.Appliance)&auto.unitrends.JobName=$($i.JobName)&auto.unitrends.JobType=$($i.JobType)&auto.unitrends.JobApp=$($i.JobApp)&auto.unitrends.JobFrequency=$($i.JobFrequency)&auto.unitrends.BackupStart=$($i.BackupStart)&auto.unitrends.BackupType=$($i.BackupType)&auto.unitrends.BackupID=$($i.BackupID)\"\n}"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>&#60;#
.NOTES
    Author:     Andy Escolastico
#&#62;
#----------------------------------------------------------[Declarations]----------------------------------------------------------#

$UniServer = &#34;##hostname##&#34;
$UniUser = &#34;##uni.user##&#34;
$UniPass = &#34;##uni.pass##&#34;

#-----------------------------------------------------------[Functions]------------------------------------------------------------#

(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-backups/main/unitrends-functions.ps1&#39;) | Invoke-Expression

(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-backups/main/general-functions.ps1&#39;) | Invoke-Expression

#-----------------------------------------------------------[Execution]------------------------------------------------------------#

# Ignores invalid certificate errors
Skip-InvalidCertErrors

try {
    # Connect to Unitrends server and retrieve auth token
    $AuthToken = (Get-UniSession -Server $UniServer -User $UniUser -Pass $UniPass).auth_token
    # Collect Job data
    $JobHistory = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/jobs/history/backup&#34;).data
    $JobConfigs = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/joborders&#34;).data
    $ApplianceiTime = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/date-time&#34;)
    # Add server ip and frequency datapoint to Job objects
    foreach ($i in $JobHistory) {
        $Frequency = $JobConfigs | Where-Object {$_.name -eq $i.name} | Select-Object calendar_str
        $Frequency = $Frequency.calendar_str | Where-Object {$_ -Notlike &#34;*/*/*&#34;}
        if (@($Frequency).Count -gt 1){
            $Frequency = $Frequency -Join &#34;; &#34;
        }
        $i | Add-Member -NotePropertyName &#34;frequency&#34; -NotePropertyValue $Frequency
        $i | Add-Member -NotePropertyName &#34;system_ip&#34; -NotePropertyValue $UniServer
    }
    # Collect Asset-Source data
    $Sources = (Invoke-UniRest -Server $UniServer -AuthToken $AuthToken -Method &#34;GET&#34; -Endpoint &#34;/assets&#34;).data
    # Build Asset Custom Objects
    $Assets = @()
    foreach ($x in $Sources) {
        foreach ($y in $x.children){
            $obj = [PSCustomObject]@{
                Asset = $y.name
                Source = $x.name
            }
            $Assets += $obj
        }
    }    
} catch {
    Write-Output &#34;Could not connect to $UniServer. Check Credentials or API access.&#34;
}

# Builds Objects for Unnasigned Assets
$arr = @()
foreach ($x in $JobHistory){
    foreach ($y in $x.backups){
        $obj = [PSCustomObject]@{
            Asset = $y.asset_name
            Source = $y.client_name
            Server = $x.system_ip
            Appliance = $x.system_name
            JobName = $x.name
            JobType = $x.type
            JobApp = $x.app_name
            JobFrequency = $x.frequency
            BackupStatus = $y.status
            BackupStart = [DateTime]$y.start_time
            BackupType = $y.mode
            BackupSize = $y.size
            BackupID = $y.backup_id
        }
        $arr += $obj
    }  
}
$AssignedUniAssets = $arr | Where-Object {($_.BackupStatus -ne &#34;Active&#34;) -and ($_.BackupStatus -ne &#34;Queued&#34;)} | Group-Object Asset | Foreach-Object {$_.Group | Sort-Object BackupStart | Select-Object -Last 1}
$ActiveUniAssets = $arr | Where-Object {($_.BackupStatus -eq &#34;Active&#34;) -or ($_.BackupStatus -eq &#34;Queued&#34;)}

# Builds Objects for Unnasigned Assets
$arr = @()
foreach ($i in $Assets) {    
    if ($i.Asset -notin $AssignedUniAssets.Asset) {
        $obj = [PSCustomObject]@{
            Asset = $i.Asset
            Source = $i.Source
        }
        $arr += $obj
    }
}
$UnassignedUniAssets = $arr

# Normalize Server Time
$ApplianceiTime = &#34;$($ApplianceiTime.month)/$($ApplianceiTime.day)/$($ApplianceiTime.year) $($ApplianceiTime.hour):$($ApplianceiTime.minute):$($ApplianceiTime.second)&#34;

#-----------------------------------------------------------[LogicMonitor Output]------------------------------------------------------------#

# Batch Collection Output
$StatusMap = @{
    Success = 0
    Warning = 1
    Error = 2
}

foreach ($i in $AssignedUniAssets){
    Write-Host &#34;$(($i.Asset) -replace(&#34; &#34;, &#34;_&#34;)).BackupStatus=$($StatusMap.($i.BackupStatus))&#34;
    Write-Host &#34;$(($i.Asset) -replace(&#34; &#34;, &#34;_&#34;)).BackupSizeMB=$($i.BackupSize)&#34;
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>BackupSizeMB</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.BackupSizeMB</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>LastBackupStatus</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.BackupStatus</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>$StatusMap = @{
    Success = 0
    Warning = 1
    Error = 2
}</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
