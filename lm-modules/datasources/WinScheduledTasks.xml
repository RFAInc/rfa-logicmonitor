<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1597282520</version>
        <name>WinScheduledTasks</name>
        <displayedas>Scheduled Tasks</displayedas>
        <description>by Mike Suding, Feb 2017. Gets &#39;LastTaskResult&#39; from all enabled tasks. Result of 0 means success all others mean failure. State 3=Ready.
Beware LastResult codes are sometimes shown on internet as hex and sometimes decimal. Here they are shown as decimal.</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>300</schedule>
        <appliesTo>isWindows()</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>$computer = &#34;##SYSTEM.SYSNAME##&#34;
$my_tasks     = Invoke-Command -ComputerName $computer -ScriptBlock {Get-ScheduledTask | where-object{ $_.state -NE &#39;Disabled&#39;} }
$my_tasksinfo = Invoke-Command -ComputerName $computer -ScriptBlock {Get-ScheduledTask | where-object{ $_.state -NE &#39;Disabled&#39;} | Get-ScheduledTaskInfo |select LastRunTime,LastTaskResult,TaskName,TaskPath | Sort-Object TaskName}

forEach ($task in $my_tasks) {
    switch($task.state)
    {
    &#34;0&#34; {$state = &#34;Unknown&#34;} 
    &#34;1&#34; {$state = &#34;Disabled&#34;}
    &#34;2&#34; {$state = &#34;Queued&#34;}
    &#34;3&#34; {$state = &#34;Ready&#34;}
    &#34;4&#34; {$state = &#34;Running&#34;}
    }
    $taskinfo = $my_tasksinfo |where-object{$_.taskname -eq $($task.taskname)}
    $output=$taskinfo.TaskPath + $taskinfo.TaskName + &#34;##&#34; + $taskinfo.TaskName + &#34;__&#34; +$state + &#34;##LastRun: &#34; + $taskinfo.LastRunTime
    $output=$output.replace(&#39; &#39;,&#39;_&#39;)
    $output=$output.replace(&#39;\&#39;,&#39;~&#39;)
    write-host $output
}
EXIT</wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Windows</group>
        <tags></tags>
        <technology>I used &#39;filter&#39; instance to filter out all with &#39;Microsoft&#39; in path.</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[{"attribute":"##WILDVALUE##","operation":"RegexNotMatch","value":"Microsoft"}],"params":{"type":"powerShell","groovyscript":"$computer = \"##SYSTEM.SYSNAME##\"\n$my_tasks     = Invoke-Command -ComputerName $computer -ScriptBlock {Get-ScheduledTask | where-object{ $_.state -NE 'Disabled'} }\n$my_tasksinfo = Invoke-Command -ComputerName $computer -ScriptBlock {Get-ScheduledTask | where-object{ $_.state -NE 'Disabled'} | Get-ScheduledTaskInfo |select LastRunTime,LastTaskResult,TaskName,TaskPath | Sort-Object TaskName}\n\nforEach ($task in $my_tasks) {\n    switch($task.state)\n    {\n    \"0\" {$state = \"Unknown\"} \n    \"1\" {$state = \"Disabled\"}\n    \"2\" {$state = \"Queued\"}\n    \"3\" {$state = \"Ready\"}\n    \"4\" {$state = \"Running\"}\n    }\n    $taskinfo = $my_tasksinfo |where-object{$_.taskname -eq $($task.taskname)}\n    $output=$taskinfo.TaskPath + $taskinfo.TaskName + \"##\" + $taskinfo.TaskName + \"__\" +$state + \"##LastRun: \" + $taskinfo.LastRunTime\n    $output=$output.replace(' ','_')\n    $output=$output.replace('\\','~')\n    write-host $output\n}\nEXIT"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>$computer = &#34;##SYSTEM.SYSNAME##&#34;
$my_tasks     = Invoke-Command -ComputerName $computer -ScriptBlock {Get-ScheduledTask | where-object{ $_.state -NE &#39;Disabled&#39;} }
$my_tasksinfo = Invoke-Command -ComputerName $computer -ScriptBlock {Get-ScheduledTask | where-object{ $_.state -NE &#39;Disabled&#39;} | Get-ScheduledTaskInfo |select LastRunTime,LastTaskResult,TaskName,TaskPath | Sort-Object TaskName}

forEach ($task in $my_tasks) {
    $taskinfo = $my_tasksinfo |where-object{$_.taskname -eq $($task.taskname)}
    $output_line_1 = $taskinfo.TaskPath + $taskinfo.TaskName + &#34;.State=&#34; + $task.state
    $output_line_2 = $taskinfo.TaskPath + $taskinfo.TaskName + &#34;.LastTaskResult=&#34; + $taskinfo.LastTaskResult
    $output_line_1 = $output_line_1.replace(&#39; &#39;,&#39;_&#39;)
    $output_line_2 = $output_line_2.replace(&#39; &#39;,&#39;_&#39;)
    $output_line_1 = $output_line_1.replace(&#39;\&#39;,&#39;~&#39;)
    $output_line_2 = $output_line_2.replace(&#39;\&#39;,&#39;~&#39;)
    write-host $output_line_1
    write-host $output_line_2
}
EXIT</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>__filter_0</name>
            <value>##WILDVALUE##	RegexNotMatch	Microsoft</value>
            <comment>only if NOT &#39;Microsoft&#39;</comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>LastResult</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.LastTaskResult</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>0=success. All others are failures. ~40 other codes on Microsoft website
https://msdn.microsoft.com/en-us/library/windows/desktop/aa383604(v=vs.85).aspx</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>State</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.State</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>3=ready, 4=running</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>LastResult (0 means success)</name>
            <title>LastResult (0 means success)</title>
            <verticallabel>Result code</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>-1.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>LastResult_0_is_good</name>
            <datapointname>LastResult</datapointname>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>LastResult_0_is_good</legend>
                <color>silver</color>
                <datapointname>LastResult_0_is_good</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
