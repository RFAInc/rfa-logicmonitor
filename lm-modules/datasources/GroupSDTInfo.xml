<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1605303337</version>
        <name>GroupSDTInfo</name>
        <displayedas>GroupSDTInfo</displayedas>
        <description></description>
        <collector>script</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>14400</schedule>
        <appliesTo>system.displayname == &#34;RFA-LM-Portal&#34;</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>#########################      API Function Script      #########################
#------------------------------------------------------------------------------------------------------------
# Prerequisites:
#
#Requires -Version 4
#------------------------------------------------------------------------------------------------------------
# Initialize Variables
&#60;# account info #&#62;
$accessId = &#39;##api.user##&#39;
$accessKey = &#39;##api.pass##&#39;
$company = &#39;rfa&#39;
#------------------------------------------------------------------------------------------------------------


# Functionize the reusable code that builds and executes the query
function Send-Request() {
    Param(
        [Parameter(position = 0, Mandatory = $true)]
        [string]$path,
        [Parameter(position = 1, Mandatory = $false)]
        [string]$httpVerb = &#39;GET&#39;,
        [Parameter(position = 2, Mandatory = $false)]
        [string]$queryParams,
        [Parameter(position = 3, Mandatory = $false)]
        [PSObject]$data,
        [Parameter(position = 4, Mandatory = $false)]
        [string]$version
    )

    # Use TLS 1.2
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

    &#60;# Construct URL #&#62;
    $url = &#34;https://$company.logicmonitor.com/santaba/rest$path$queryParams&#34;

    &#60;# Get current time in milliseconds #&#62;
    $epoch = [Math]::Round((New-TimeSpan -Start (Get-Date -Date &#34;1/1/1970&#34;) -End (Get-Date).ToUniversalTime()).TotalMilliseconds)

    &#60;# Concatenate Request Details #&#62;
    $requestVars = $httpVerb + $epoch + $data + $path

    &#60;# Construct Signature #&#62;
    $hmac = New-Object System.Security.Cryptography.HMACSHA256
    $hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)
    $signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))
    $signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace &#39;-&#39;
    $signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))

    &#60;# Construct Headers #&#62;
    $auth = &#39;LMv1 &#39; + $accessId + &#39;:&#39; + $signature + &#39;:&#39; + $epoch
    $headers = New-Object &#34;System.Collections.Generic.Dictionary[[String],[String]]&#34;
    $headers.Add(&#34;Authorization&#34;, $auth)
    $headers.Add(&#34;Content-Type&#34;, &#39;application/json&#39;)
    $headers.Add(&#34;X-version&#34;, $version)

    &#60;# Make request &#38; retry if failed due to rate limiting #&#62;
    $Stoploop = $false
    do {
        try {
            &#60;# Make Request #&#62;
            $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers
            $Stoploop = $true
        } catch {
            switch ($_) {
                { $_.Exception.Response.StatusCode.value__ -eq 429 } {
                    Write-Host &#34;Request exceeded rate limit, retrying in 60 seconds...&#34;
                    Start-Sleep -Seconds 60
                    $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers
                }
                { $_.Exception.Response.StatusCode.value__ } {
                    Write-Host &#34;Request failed, not as a result of rate limiting&#34;
                    # Dig into the exception to get the Response details.
                    # Note that value__ is not a typo.
                    Write-Host &#34;StatusCode: $($_.Exception.Response.StatusCode.value__)&#34;
                    Write-Host &#34;StatusDescription: $($_.Exception.Response.StatusCode)&#34;
                    $_.ErrorDetails.Message -match &#39;{&#34;errorMessage&#34;:&#34;([\d\S\s]+)&#34;,&#34;errorCode&#34;:(\d+),&#39;
                    Write-Host &#34;LM ErrorMessage $($matches[1])&#34;
                    Write-Host &#34;LM ErrorCode $($matches[2])&#34;
                    $response = $null
                    $Stoploop = $true
                }
                default {
                    Write-Host &#34;An Unknown Exception occurred:&#34;
                    Write-Host ($_ | Format-List -Force)
                    $response = $null
                    $Stoploop = $true
                }
            }
        }
    } While ($Stoploop -eq $false)
    Return $response
}


function Get-DeviceGroups {

    $response = @()
    $remaining = $true
    $offset = 0
    $size = 1000

    while ($remaining) {
        $httpVerb = &#39;GET&#39;
        $resourcePath = &#34;/device/groups&#34;
        $queryParams = &#34;?size=$size&#38;offset=$offset&#34;
        $data = $null
        $version = &#39;3&#39;

        $result = (Send-Request $resourcePath $httpVerb $queryParams $data $version).items
        $response += $result
        if ($result.Count -lt $size) {
            $remaining = $false
        } else {
            $offset += $size
        }
    }
    return $response
}

$groups = Get-DeviceGroups

foreach ($group in $groups) {
    Write-Host &#34;$($group.id)##$($group.fullPath)##$($group.description)&#34;
}</wildcardgroovyscript>
        <wildcardschedule>60</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>LM SDT</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"powerShell","groovyscript":"#########################      API Function Script      #########################\n#------------------------------------------------------------------------------------------------------------\n# Prerequisites:\n#\n#Requires -Version 4\n#------------------------------------------------------------------------------------------------------------\n# Initialize Variables\n<# account info #>\n$accessId = '##api.user##'\n$accessKey = '##api.pass##'\n$company = 'rfa'\n#------------------------------------------------------------------------------------------------------------\n\n\n# Functionize the reusable code that builds and executes the query\nfunction Send-Request() {\n    Param(\n        [Parameter(position = 0, Mandatory = $true)]\n        [string]$path,\n        [Parameter(position = 1, Mandatory = $false)]\n        [string]$httpVerb = 'GET',\n        [Parameter(position = 2, Mandatory = $false)]\n        [string]$queryParams,\n        [Parameter(position = 3, Mandatory = $false)]\n        [PSObject]$data,\n        [Parameter(position = 4, Mandatory = $false)]\n        [string]$version\n    )\n\n    # Use TLS 1.2\n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n    <# Construct URL #>\n    $url = \"https://$company.logicmonitor.com/santaba/rest$path$queryParams\"\n\n    <# Get current time in milliseconds #>\n    $epoch = [Math]::Round((New-TimeSpan -Start (Get-Date -Date \"1/1/1970\") -End (Get-Date).ToUniversalTime()).TotalMilliseconds)\n\n    <# Concatenate Request Details #>\n    $requestVars = $httpVerb + $epoch + $data + $path\n\n    <# Construct Signature #>\n    $hmac = New-Object System.Security.Cryptography.HMACSHA256\n    $hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)\n    $signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))\n    $signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace '-'\n    $signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))\n\n    <# Construct Headers #>\n    $auth = 'LMv1 ' + $accessId + ':' + $signature + ':' + $epoch\n    $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n    $headers.Add(\"Authorization\", $auth)\n    $headers.Add(\"Content-Type\", 'application/json')\n    $headers.Add(\"X-version\", $version)\n\n    <# Make request & retry if failed due to rate limiting #>\n    $Stoploop = $false\n    do {\n        try {\n            <# Make Request #>\n            $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers\n            $Stoploop = $true\n        } catch {\n            switch ($_) {\n                { $_.Exception.Response.StatusCode.value__ -eq 429 } {\n                    Write-Host \"Request exceeded rate limit, retrying in 60 seconds...\"\n                    Start-Sleep -Seconds 60\n                    $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers\n                }\n                { $_.Exception.Response.StatusCode.value__ } {\n                    Write-Host \"Request failed, not as a result of rate limiting\"\n                    # Dig into the exception to get the Response details.\n                    # Note that value__ is not a typo.\n                    Write-Host \"StatusCode: $($_.Exception.Response.StatusCode.value__)\"\n                    Write-Host \"StatusDescription: $($_.Exception.Response.StatusCode)\"\n                    $_.ErrorDetails.Message -match '{\"errorMessage\":\"([\\d\\S\\s]+)\",\"errorCode\":(\\d+),'\n                    Write-Host \"LM ErrorMessage $($matches[1])\"\n                    Write-Host \"LM ErrorCode $($matches[2])\"\n                    $response = $null\n                    $Stoploop = $true\n                }\n                default {\n                    Write-Host \"An Unknown Exception occurred:\"\n                    Write-Host ($_ | Format-List -Force)\n                    $response = $null\n                    $Stoploop = $true\n                }\n            }\n        }\n    } While ($Stoploop -eq $false)\n    Return $response\n}\n\n\nfunction Get-DeviceGroups {\n\n    $response = @()\n    $remaining = $true\n    $offset = 0\n    $size = 1000\n\n    while ($remaining) {\n        $httpVerb = 'GET'\n        $resourcePath = \"/device/groups\"\n        $queryParams = \"?size=$size&offset=$offset\"\n        $data = $null\n        $version = '3'\n\n        $result = (Send-Request $resourcePath $httpVerb $queryParams $data $version).items\n        $response += $result\n        if ($result.Count -lt $size) {\n            $remaining = $false\n        } else {\n            $offset += $size\n        }\n    }\n    return $response\n}\n\n$groups = Get-DeviceGroups\n\nforeach ($group in $groups) {\n    Write-Host \"$($group.id)##$($group.fullPath)##$($group.description)\"\n}"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#########################      API Function Script      #########################
#------------------------------------------------------------------------------------------------------------
# Prerequisites:
#
#Requires -Version 4
#------------------------------------------------------------------------------------------------------------
&#60;# account info #&#62;
$accessId = &#39;##api.user##&#39;
$accessKey = &#39;##api.pass##&#39;
$company = &#39;rfa&#39;
#------------------------------------------------------------------------------------------------------------

# Functionize the reusable code that builds and executes the query
function Send-Request() {
    Param(
        [Parameter(position = 0, Mandatory = $true)]
        [string]$path,
        [Parameter(position = 1, Mandatory = $false)]
        [string]$httpVerb = &#39;GET&#39;,
        [Parameter(position = 2, Mandatory = $false)]
        [string]$queryParams,
        [Parameter(position = 3, Mandatory = $false)]
        $data = $null,
        [Parameter(position = 4, Mandatory = $false)]
        $version = 3

    )

    if ($data -and $data -isnot [string]) { $data = $data | ConvertTo-Json -Depth 10 }
    
    # Use TLS 1.2
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

    &#60;# Construct URL #&#62;
    $url = &#34;https://$company.logicmonitor.com/santaba/rest$path$queryParams&#34;
    
    &#60;# Get current time in milliseconds #&#62;
    $epoch = [Math]::Round((New-TimeSpan -start (Get-Date -Date &#34;1/1/1970&#34;) -end (Get-Date).ToUniversalTime()).TotalMilliseconds)

    &#60;# Concatenate Request Details #&#62;
    $requestVars = $httpVerb + $epoch + $data + $path

    &#60;# Construct Signature #&#62;
    $hmac = New-Object System.Security.Cryptography.HMACSHA256
    $hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)
    $signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))
    $signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace &#39;-&#39;
    $signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))

    &#60;# Construct Headers #&#62;
    $auth = &#39;LMv1 &#39; + $accessId + &#39;:&#39; + $signature + &#39;:&#39; + $epoch
    $headers = New-Object &#34;System.Collections.Generic.Dictionary[[String],[String]]&#34;
    $headers.Add(&#34;Authorization&#34;, $auth)
    $headers.Add(&#34;Content-Type&#34;, &#39;application/json&#39;)
    $headers.Add(&#34;X-version&#34;, $version)

    &#60;# Make request &#38; retry if failed due to rate limiting #&#62;
    $Stoploop = $false
    do {
        try {
            &#60;# Make Request #&#62;
            $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers
            $Stoploop = $true
        }
        catch {
            switch ($_) {
                { $_.Exception.Response.StatusCode.value__ -eq 429 } {
                    Write-Host &#34;Request exceeded rate limit, retrying in 60 seconds...&#34;
                    Start-Sleep -Seconds 60
                    $response = Invoke-RestMethod -Uri $url -Method $httpVerb -Body $data -Header $headers
                }
                default {
                    write-host $_
                    $Stoploop = $true
                }
            }
        }
    } While ($Stoploop -eq $false)
    Return $response
}




function Get-SDTHistory {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/groups/$id/historysdts&#34;
    $queryParams = $null
    $data = $null
    $version = &#39;3&#39;
    $sdtHistory = Send-Request $resourcePath $httpVerb $queryParams $data $version
    Return $sdtHistory.items
}

function Get-GroupAlertsBefore {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id,
        [Parameter(position = 1, Mandatory = $true)]
        [string]$start
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/groups/$id/alerts&#34;
    $queryParams = &#34;?start&#60;$start&#38;size=1000&#34;
    $data = $null
    $version = &#39;3&#39;
    $alerts = Send-Request $resourcePath $httpVerb $queryParams $data $version
    Return $alerts
}


function Get-GroupAlertsAfter {
    param (
        [Parameter(position = 0, Mandatory = $true)]
        [string]$id,
        [Parameter(position = 1, Mandatory = $true)]
        [string]$start
    )

    $httpVerb = &#39;GET&#39;
    $resourcePath = &#34;/device/groups/$id/alerts&#34;
    $queryParams = &#34;?start&#62;$start&#38;size=1000&#34;
    $data = $null
    $version = &#39;3&#39;
    $alerts = Send-Request $resourcePath $httpVerb $queryParams $data $version
    write-host $alerts
    Return $alerts
}

$groupid = &#34;##wildvalue##&#34;
if ($groupid) {
    $group = Send-Request -path &#34;/device/groups/$groupid&#34;
} else {
    write-host &#34;failed to get group from wildvalue&#34;
    return 1
}

if ($group) {
    switch ($group.alertStatus) {
        { $_ -eq &#34;none&#34; } {
            $groupAlertStatus = 0
        } { $_ -match &#34;-warn-&#34; } {
            $groupAlertStatus = 1
        } { $_ -match &#34;-error-&#34; } {
            $groupAlertStatus = 2
        } { $_ -match &#34;-critical-&#34; } {
            $groupAlertStatus = 3
        }
    }
    
    switch ($group.sdtStatus) {
        { $_ -eq &#34;none-none-none&#34; } {
            $groupSDTStatus = 0
        } { $_ -match &#34;SDT&#34; } {
            $groupSDTStatus = 1
        } 
    }

    $groupSDT = Get-SDTHistory $group.id | Sort-Object -Property approximateEndEpoch -Descending | Select-Object -First 1
    if ($groupsdt) {
        $currentEpoch = [Math]::Round((New-TimeSpan -Start (Get-Date -Date &#34;1/1/1970&#34;) -End (Get-Date).ToUniversalTime()).TotalMilliseconds)
        $sdtStartEpoch = $groupSDT.approximateStartEpoch
        $sdtEndEpoch = $groupSDT.approximateEndEpoch
        $startTimeDiffMin = [math]::Round(($currentEpoch - $sdtStartEpoch) / 60000)
        $alertsBeforeSDT = (Get-groupAlertsBefore $group.id $sdtStartEpoch).total
        $endTimeDiffMin = [math]::Round(($currentEpoch - $sdtEndEpoch) / 60000)
        $alertsAfterSDT = (Get-groupAlertsAfter $group.id $sdtEndEpoch).total
    } else {
        $starttimediffmin = &#34;no data&#34;
        $alertsbeforesdt = 0
        $endtimediffmin = &#34;no data&#34;
        $alertsaftersdt = 0
    }
     

    Write-Host &#34;MinutesSinceSDTStart=$startTimeDiffMin&#34;
    Write-Host &#34;MinutesSinceSDTEnd=$endTimeDiffMin&#34;
    Write-Host &#34;SDTActive=$groupSDTStatus&#34;
    Write-Host &#34;CurrentAlertSeverity=$groupAlertStatus&#34;
    Write-Host &#34;ActiveAlertsBeforeSDT=$alertsBeforeSDT&#34;
    Write-Host &#34;ActiveAlertsAfterSDT=$alertsAfterSDT&#34;
} else {
    write-host &#34;failed to get group from api&#34;
    return 1
}

return 0</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>CurrentAlertSeverity</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>CurrentAlertSeverity</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MinutesSinceLastSDTEnd</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>MinutesSinceSDTEnd</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MinutesSinceLastSDTStart</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>MinutesSinceSDTStart</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>SDTActive</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>SDTActive</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ActiveAlertsAfterLastSDT</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>ActiveAlertsAfterSDT</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ActiveAlertsBeforeLastSDT</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>ActiveAlertsBeforeSDT</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
