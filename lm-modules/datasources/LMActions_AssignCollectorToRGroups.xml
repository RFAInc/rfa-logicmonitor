<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1605575683</version>
        <name>LMActions_AssignCollectorToRGroups</name>
        <displayedas>Assign a Collector</displayedas>
        <description></description>
        <collector>script</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>600</schedule>
        <appliesTo>isLMActions()</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>&#60;#
.NOTES
    Author:     Andy Escolastico
#&#62;
#----------------------------------------------------------[Declarations]----------------------------------------------------------#

$accessId = &#39;##api.user##&#39;
$accessKey = &#39;##api.pass##&#39;
$tenantName = &#39;##api.account##&#39;

#-----------------------------------------------------------[Functions]------------------------------------------------------------#

(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-logicmonitor/main/api-functions.ps1&#39;) | Invoke-Expression
(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-backups/main/general-functions.ps1&#39;) | Invoke-Expression

#-----------------------------------------------------------[Execution]------------------------------------------------------------#

# Ignores invalid certificate errors
Skip-InvalidCertErrors

$rGroups = (Invoke-LomoApi -tenantName $tenantName -accessId $accessId -accessKey $accessKey -httpverb &#34;GET&#34; -resourcePath &#34;/device/groups&#34; -queryParams &#39;?filter=name:Devices by Organization&#39; -Version 1).data.items.subgroups | Select-Object id, name

$rGroups | ForEach-Object {
    $rGroupProps = Invoke-LomoApi -tenantName $tenantName -accessId $accessId -accessKey $accessKey -httpverb &#34;GET&#34; -resourcePath &#34;/device/groups/$($_.id)&#34; -queryParams &#39;?fields=customProperties,defaultCollectorId,defaultCollectorGroupId,defaultAutoBalancedCollectorGroupId&#39; 
    $_ | Add-Member -MemberType &#34;NoteProperty&#34; -Name &#34;companyID&#34; -Value (($rGroupProps.customProperties | Where-Object {$_.name -eq &#34;company.id&#34;}).value)
    $_ | Add-Member -MemberType &#34;NoteProperty&#34; -Name &#34;defaultCollectorId&#34; -Value $rGroupProps.defaultCollectorId
    $_ | Add-Member -MemberType &#34;NoteProperty&#34; -Name &#34;defaultCollectorGroupId&#34; -Value $rGroupProps.defaultCollectorGroupId
    $_ | Add-Member -MemberType &#34;NoteProperty&#34; -Name &#34;defaultAutoBalancedCollectorGroupId&#34; -Value $rGroupProps.defaultAutoBalancedCollectorGroupId
}

$nonCompliantRGroups = $rGroups | Where-Object defaultCollectorGroupId -eq 0

#-----------------------------------------------------------[LogicMonitor Output]------------------------------------------------------------#

# Discovery Output
foreach ($i in $nonCompliantRGroups){
    Write-Output &#34;$($i.id)_$($i.companyID)##$($i.name)##company.id=$($i.companyID)&#34;
}</wildcardgroovyscript>
        <wildcardschedule>15</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>true</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>LM Actions</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"powerShell","groovyscript":"<#\n.NOTES\n    Author:     Andy Escolastico\n#>\n#----------------------------------------------------------[Declarations]----------------------------------------------------------#\n\n$accessId = '##api.user##'\n$accessKey = '##api.pass##'\n$tenantName = '##api.account##'\n\n#-----------------------------------------------------------[Functions]------------------------------------------------------------#\n\n(new-object Net.WebClient).DownloadString('https://raw.githubusercontent.com/RFAInc/rfa-logicmonitor/main/api-functions.ps1') | Invoke-Expression\n(new-object Net.WebClient).DownloadString('https://raw.githubusercontent.com/RFAInc/rfa-backups/main/general-functions.ps1') | Invoke-Expression\n\n#-----------------------------------------------------------[Execution]------------------------------------------------------------#\n\n# Ignores invalid certificate errors\nSkip-InvalidCertErrors\n\n$rGroups = (Invoke-LomoApi -tenantName $tenantName -accessId $accessId -accessKey $accessKey -httpverb \"GET\" -resourcePath \"/device/groups\" -queryParams '?filter=name:Devices by Organization' -Version 1).data.items.subgroups | Select-Object id, name\n\n$rGroups | ForEach-Object {\n    $rGroupProps = Invoke-LomoApi -tenantName $tenantName -accessId $accessId -accessKey $accessKey -httpverb \"GET\" -resourcePath \"/device/groups/$($_.id)\" -queryParams '?fields=customProperties,defaultCollectorId,defaultCollectorGroupId,defaultAutoBalancedCollectorGroupId' \n    $_ | Add-Member -MemberType \"NoteProperty\" -Name \"companyID\" -Value (($rGroupProps.customProperties | Where-Object {$_.name -eq \"company.id\"}).value)\n    $_ | Add-Member -MemberType \"NoteProperty\" -Name \"defaultCollectorId\" -Value $rGroupProps.defaultCollectorId\n    $_ | Add-Member -MemberType \"NoteProperty\" -Name \"defaultCollectorGroupId\" -Value $rGroupProps.defaultCollectorGroupId\n    $_ | Add-Member -MemberType \"NoteProperty\" -Name \"defaultAutoBalancedCollectorGroupId\" -Value $rGroupProps.defaultAutoBalancedCollectorGroupId\n}\n\n$nonCompliantRGroups = $rGroups | Where-Object defaultCollectorGroupId -eq 0\n\n#-----------------------------------------------------------[LogicMonitor Output]------------------------------------------------------------#\n\n# Discovery Output\nforeach ($i in $nonCompliantRGroups){\n    Write-Output \"$($i.id)_$($i.companyID)##$($i.name)##company.id=$($i.companyID)\"\n}"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>&#60;#
.NOTES
    Author:     Andy Escolastico
#&#62;
#----------------------------------------------------------[Declarations]----------------------------------------------------------#

$accessId = &#39;##api.user##&#39;
$accessKey = &#39;##api.pass##&#39;
$tenantName = &#39;##api.account##&#39;
$rGroupLMID = (&#34;##WILDVALUE##&#34; -split (&#34;_&#34;))[0]
$rGroupCompanyID = (&#34;##WILDVALUE##&#34; -split (&#34;_&#34;))[1]

#-----------------------------------------------------------[Functions]------------------------------------------------------------#

(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-logicmonitor/main/api-functions.ps1&#39;) | Invoke-Expression
(new-object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/RFAInc/rfa-backups/main/general-functions.ps1&#39;) | Invoke-Expression

#-----------------------------------------------------------[Execution]------------------------------------------------------------#

# Ignores invalid certificate errors
Skip-InvalidCertErrors

$cGroups = (Invoke-LomoApi -tenantName $tenantName -accessId $accessId -accessKey $accessKey -httpverb &#34;GET&#34; -resourcePath &#34;/setting/collectors/groups&#34; -queryParams &#39;?size=10000&#39;-Version 1).data.items | Select-Object id, name, numOfCollectors, customProperties

$cGroups | ForEach-Object { 
    $cGroupCompanyID = $_.customProperties | ForEach-Object { 
        ($_ | Where-Object {$_.name -eq &#34;company.id&#34;}).value
    } 
    $_ | Add-Member -MemberType &#34;NoteProperty&#34; -Name &#34;companyID&#34; -Value $cGroupCompanyID
}

$cGroup = $cGroups | Where-Object {$_.companyID -eq $rGroupCompanyID}

if ($cGroup.numOfCollectors -gt 0){
    $cGroupLMID = $cGroup.id
    $cGConfig = @{
        &#34;defaultCollectorId&#34; = 0
        &#34;defaultCollectorGroupId&#34; = $cGroupLMID
        &#34;defaultAutoBalancedCollectorGroupId&#34; = $cGroupLMID
    } | ConvertTo-Json
    $Result = Invoke-LomoApi -tenantName $tenantName -accessId $accessId -accessKey $accessKey -httpverb &#34;PATCH&#34; -resourcePath &#34;/device/groups/$rGroupLMID&#34; -queryParams &#39;?patchFields=defaultCollectorId,defaultCollectorGroupId,defaultAutoBalancedCollectorGroupId&#39; -httpBody $cGConfig
}
#-----------------------------------------------------------[LogicMonitor Output]------------------------------------------------------------#</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>ActionResult</name>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>exitCode</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
