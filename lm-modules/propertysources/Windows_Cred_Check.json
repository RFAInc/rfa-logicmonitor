{
    "scheduleOption": 0,
    "dataType": 0,
    "description": "",
    "appliesTo": "isWindows()",
    "technology": "",
    "type": "propertyrule",
    "params": [
        {
            "name": "linuxcmdline",
            "comment": "",
            "value": ""
        },
        {
            "name": "linuxscript",
            "comment": "",
            "value": ""
        },
        {
            "name": "scriptgroovy",
            "comment": "",
            "value": "import com.santaba.agent.groovyapi.win32.WMI\n\ndef hostName = hostProps.get(\"system.hostname\")\n\ndef hexErrorCode;\ndef decErrorCode;\n\ntry {\n\t// We are not expecting this to work, given the DS is to identify failing WMI requests...\n\t// In the case where it does work, we will exit successfully without any output\n\t// Datasource will cease applying once system.sysinfo gets populated from an autoprops run in this case.\n\tWMI.queryFirst(hostName, \"select * from Win32_OperatingSystem\", 60)\n}\ncatch (IOException e) {\n\tdef decRegexEA23026 = /status=[^0x]([\\S]{4,})/;\n\tdef hexregexGD22005 = /Error:\\s*([^:]*)/;\n\tdef hexregexGD28000 = /status=0x([A-Fa-f\\d]+)/;\n\n\tdef exceptionCodeMatcher\n\tdef codeType\n\n\t// try matching regex with ifs\n\tif (e =~ hexregexGD22005) {\n\t\t// Have a match for the response type from Collector GD22.005 and earlier\n\t\t// Hex value\n\t\texceptionCodeMatcher = (e =~ hexregexGD22005)\n\t\tcodeType = 'hex';\n\t}\n\telse if (e =~ decRegexEA23026) {\n\t\t// Have a match for the response type from Collector EA23.026 to GD27.005\n\t\t// Dec value\n\t\texceptionCodeMatcher = (e =~ decRegexEA23026)\n\t\tcodeType = 'dec';\n\t}\n\telse if (e =~ hexregexGD28000) {\n\t\t// Have a match for response type from Collector GD28.000 and later\n\t\t// Hex value\n\t\texceptionCodeMatcher = (e =~ hexregexGD28000)\n\t\tcodeType = 'hex';\n\t}\n\telse {\n\t\t// No match to any expected error message\n\t\thexErrorCode = 0\n\t\tdecErrorCode = 0\n\t}\n\t\n\t// We have now determined hex or dec as the error code format, and the matcher\n\tif(codeType == 'dec') {\n\t\tdecErrorCode = exceptionCodeMatcher[0][1]\n\t\thexErrorCode = Integer.toHexString(decErrorCode.toInteger())\n\t}\n\n\tif(codeType == 'hex') {\n\t\thexErrorCode = exceptionCodeMatcher[0][1]\n\t\tdecErrorCode = 0 - new BigInteger(hexErrorCode, 16)\n\t}\n}\ncatch (Exception e)\n{\n\t// Not an IOException. Print the exception to stderr and exit non-zero\n\t// maybe useful for classifying other types of common errors\n\te.printStackTrace\n\treturn 3\n}\n\n\nif (hexErrorCode != null) {\n\t\n\tprintln \"auto.wmi.working=no\"\n}\nelse {\n\tprintln \"auto.wmi.working=yes\"\n\n}"
        },
        {
            "name": "scripttype",
            "comment": "embed",
            "value": "embed"
        },
        {
            "name": "windowscmdline",
            "comment": "",
            "value": ""
        },
        {
            "name": "windowsscript",
            "comment": "",
            "value": ""
        }
    ],
    "version": 1591116859,
    "tags": "",
    "auditVersion": 0,
    "name": "Windows_Cred_Check",
    "id": 138,
    "group": "RFA Custom"
}